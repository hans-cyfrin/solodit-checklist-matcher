version: '3.8'

services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: ${POSTGRES_DB:-solodit_checklist}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth-host=md5
    command: postgres -c password_encryption=md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ENVIRONMENT=docker
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/solodit_checklist
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME}
      - GITHUB_PR_BRANCH=${GITHUB_PR_BRANCH}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    expose:
      - "8000"
    volumes:
      - ./backend:/app
    # The entrypoint script in the Dockerfile will handle database initialization
    # and starting the application
    restart: unless-stopped

  # Frontend service
  frontend:
    build: ./frontend
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_BASE_URL=/api
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx service for routing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data: